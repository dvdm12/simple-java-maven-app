pipeline {
    agent any

    environment {
        SONAR_PROJECT_KEY = 'taller-SO'
        SONAR_PROJECT_NAME = 'taller-SO'
    }

    stages {

        stage('Run Unit Tests') {
            steps {
                echo "Running JUnit tests..."
                sh 'mvn -B clean test'
            }
            post {  
                always {
                    junit 'target/surefire-reports/*.xml'
                    echo "JUnit results have been published."
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "Running SonarQube analysis..."

                sh 'unset SONARQUBE_SCANNER_PARAMS'

                withSonarQubeEnv('SonarQubeServer') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                            echo "Testing SonarQube connection..."
                            curl -u "${SONAR_AUTH_TOKEN}:" ${SONAR_HOST_URL}/api/authentication/validate

                            echo "Starting Maven SonarQube analysis..."
                            mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.token=${SONAR_AUTH_TOKEN}
                        '''
                    }
                }

                echo "SonarQube analysis completed successfully."
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Waiting for SonarQube Quality Gate result..."
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate abortPipeline: true
                        echo "Quality Gate status: ${qg.status}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
